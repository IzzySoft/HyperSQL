Known issues and limitations
============================

- JavaDoc on stand-alone objects (functions/procedures) is not included in check for mandatory tags
- if two objects have the same name (e.g. a table and its synonym), the dependency graph cannot tell them apart
  (same for where/what used currently)
- if the parameter list of an object (e.g. "PROCEDURE foobar (<parameter_list>)") contains comments,
  parameter parsing stops at that place (i.e. parameters following the comment are not recognized, and
  thus reported by JavaDoc verification as mismatch in parameter count). Seems to affect inline-comments
  ("-- comment") only.
- using paranthesis in comments inside function/procedure declarations leads to parameters following
  that comment staying unrecognised â€“ example: "function foo (p1 in char /* yuck (no) */, p2 char)"
  would leave p2 undetected. This is due to the REGEX currently used matching them '\((.*?)\)'.
  Improved REGEX welcome :)
- used_by for types not always recognized (e.g. not in RETURNS of functions, with "PIPE ROW( <type>",
  or when used by other types)

Known, but intended:
--------------------

- @used/@uses are added to JavaDoc, but not to depency links. They are intended to point to "outside resources".
- doesn't match full-qualified names between code and JavaDoc (e.g. "table_name" and "schema.table_name").
  Consider this intended, as code might cover multiple database schemata and thus mappings are not clear
  by default.
