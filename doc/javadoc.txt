Support for Javadoc style comments
==================================

HyperSQL versions after v1.3 include support for Javadoc style comments. There
is no plausibility check currently, so it's up to you to take care for correct
spelling, syntax, and logic. Basically, you could define a procedure with an
return value - sure, PL/SQL doesn't support this - but HyperSQL wouldn't complain.
Just when writing the HTML code, it would ignore the @return value specified.

Same applies to the other keywords: if your inline documentation contains tags
unsupported by HyperSQL, they will be silently ignored - so you can keep them in
the hope they will be added (and file a ticket to request this), all other stuff
will still be processed. A side effect of this is, you won't be informed about
possible typos - but you will find all those in your log file if your log level
is set to at least INFO.


Description
-----------

HyperSQLs Javadoc parser is somehow limited - which forces you to stick to its
rules. Together with those for the syntax highlighter, the good thing about it
is it enforces a clean coding style ;) Please don't ask for it: These limitations
will stay. It works this way, and I don't have the time for something more
sophisticated.

So these are the rules, explained using an example:

  /** This is an example procedure. It does something special.
   *  I just cannot remember what.
   * @procedure special
   * @param in varchar2 command_me The special thing to do
   * @param in number many_times How often this should be done
   * @param inout varchar2 the_thing The thing to manipulate
   * @version $Id$
   */

Everything between the opening tag ('/**') and the first line starting with '@'
will be treated as the description. For the overviews, a short description will
be created from this - by cutting everything following the first "stop mark
character" (dot, semi colon, line break). So in our example, the short desc
would be "This is an example procedure."

It is a good idea to start each new line with the star - this way, when browsing
your code, it is easy to tell how far the comment goes. HyperSQL expects you
doing so.

All information for a tag can be kept in one line - but (with versions post-3.7.5)
they can also span multiple lines, which will make the JavaDoc block better
human-readable in your source code.

Moreover, all Javadoc information for a given object MUST be kept in one block,
i.e. enclosed between '/**' and '*/' - the parser will close at the '*/' mark.
If you miss the object type, everything else is probably lost (since HyperSQL
would not know where it belongs to). However, if you set process.blind_offset in
your configuration accordingly, this may still work if your Javadoc block starts
immediately before/after the object declaration itself, e.g.:

  CREATE OR REPLACE PACKAGE something AS
    /** This is some package */

By default, this feature is switched off (blind_offset = 0).


Supported Tags
--------------

Object types:

 * @form
 * @function <name>
 * @mview <name>
 * @pkg <name>
 * @procedure <name>
 * @sequence <name>
 * @synonym <name>
 * @table <name>
 * @trigger
 * @type
 * @view <name>

Object properties:

 * @col <type> [<name> [<description>]
 * @param [in|out|inout] <type> [<name> [<description>]
 * @return <type> [<name> [<description>]
 * @throws <name> [<description>]

Other object information:

 * @author <text>
 * @bug <text>
 * @copyright <text>
 * @deprecated <text>
 * @example <text>
 * @ignore
 * @info <text>
 * @private
 * @see <text>
 * @since <text>
 * @testcase <text>
 * @ticket <[id] text>
 * @todo <text>
 * @used <object> [<object> ...]
 * @uses <object> [<object> ...]
 * @version <text>
 * @webpage <text>
 * @wiki <page> [text]

Further Information
-------------------

More detailed information can be found in the projects wiki, especially on the page
http://projects.izzysoft.de/trac/hypersql/wiki/JavaDoc
