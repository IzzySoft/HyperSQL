Configuration
=============

Configuration takes place using *.ini files. With HyperSQL.ini, the distribution
ships an example - which is also used as the default configuration file if you
do not specify a project. Its organization will probably be reworked for v2.0 -
but stay as it is until v1.5. The configuration file has multiple sections:

General
-------

As the name suggests, this section serves some general settings:

 * title_prefix: prefix for the HTML title on generated pages
 * project_info: a short text describing your project. This will be included
   with the main index page.
 * project_info_file: full path to a (text) file with additional information
   to be displayed at the main index page. You can use HTML tags in this file. 
 * project_logo: [path and] filename of a graphics file to be used as logo on the
   main index page
 * project_logo_url: if this is specified, it takes precedence over the previous
   setting: No file will be copied, this URL will be used directly instead. 
 * encoding: character set encoding of your source files. As this is not trivial
   to determine automatically, but usually all files of the same project use the
   same encoding, please set it in your config. Default is utf-8 - for a list
   of valid encodings, please see
   http://en.wikipedia.org/wiki/Character_encoding#Popular_character_encodings
   http://www.iana.org/assignments/character-sets


FileNames
---------

All about file names - concerning the target HTML files:

 * top_level_directory: the top level directory of the source code to parse.
   HyperSQL will investigate all directories below this recursively.
 * rcsnames: directory names to exclude from parsing (below the
   top_level_directory)
 * sql_file_exts: specify extensions of files to be treated as SQL files. Separate
   multiple extensions using spaces.
 * cpp_file_exts: the similar for C++ files
 * htmldir: where the HTML output should go to
 * css_file: the stylesheet file to include in the generated HTML pages
 * css_url is used as (additional) CSS link - so you can use both entries
 * filepath: the HTML file for the File Index With Pathnames
 * file: similar for File Index Without Pathnames
 * view: similar for the views listing
 * package: and for the package index
 * function: guessed right, HTML file for the function index
 * procedure: procedure index HTML file
 * package_full: Index of packages including all their functions and procedures

PageNames
---------

Here you do not call the pages names - but you can specify their description for
the URLs, i.e. what is displayed in the Index pages navigation. The options are
named similar to their corresponding file names options, so: 

 * filepath: the HTML file for the File Index With Pathnames
 * file: similar for File Index Without Pathnames
 * view: similar for the views listing
 * package: and for the package index
 * function: guessed right, HTML file for the function index
 * procedure: procedure index HTML file
 * package_full: Index of packages including all their functions and procedures

Pages
-----

At this place you can define which pages shall be created. Again the same naming
as above (so please look there). The value is interpreted as Boolean - so best
is to use 0 to turn a page off, and 1 to turn it on. By default, all except the
views are enabled. 

Process
-------

Here come processing options:

 * purge_on_start: whether to purge the target HTML directory from files of
   previous runs (if any) before generating new ones 
 * blind_offset: How many lines before/after the CREATE statement shall we check
   for "anonymous javadoc blocks", i.e. those missing to name the object they
   describe. This is just for compatibility for a quick start - usually, you
   should leave it to the default of 0. You may however use any positive integer
   here - but keep in mind: the larger it is, the more it finds - which may not
   always fit...
 * include_source: whether to include the (highlighted) sourcecode and link to it.
   The value must evaluate to a Boolean (, e.g. 0 for no, 1 for yes)

Logging
-------

Several logging features are available, which can be configured here. As for log
levels, chose between NONE, DEBUG, INFO, WARNING, ERROR and CRITICAL - all levels
right-hand from the chosen one are automatically included as well.

 * screenlevel: what should be logged to the screen (aka STDOUT). Defaults to ERROR
 * filelevel: what should be logged to the log file specified. Defaults to DEBUG
 * logfile: File name of the log file. Defaults to HyperSQL.log
 * progress: whether to output progress information to STDOUT. Boolean, defaults
   to 1 (True)


How the configuration works
===========================

You may ask the "Ruby Rod question" now: Who cares? But understanding how
configuration is done may help you doing it in the most optimal way, so here we
go:

On startup, HyperSQL first reads its "internal configuration defaults" - which
is a complete configuration set with default values for each available setting,
so it can even be run without any configuration file theoretically.

Next step is to check for available configuration files within the same directory
the script resides. If they exist, they are processed in the following order:

 * HyperSQL.ini
 * hypersql.ini
 * <ProjectName>.ini
 * <projectname>.ini

where the last two are only checked if a project name was specified at the command
line. Settings found in each of the files overwrite previously defined settings.
This especially means: None of the configuration files has to specify all
possible settings.

So how can you make use of this?

First, keep the HyperSQL.ini untouched, as it would either be overwritten on
updates. It may very well be the stupid programmer forgot to add an option to
the "internal configuration data" which then is handled here.

Second, if you have multiple different projects you process separately with
HyperSQL, create yourself a new file named hypersql.ini (all letters lowercase)
with those settings all (or most) of your projects have in common. Of course,
this only works with "real operating systems" - so this cannot be done under
Windows (which is not case sensitive regarding file names).

Last, create a separate configuration file holding only those values specific
to each of your projects. This file will be the only one you need to create
for new projects then.

This way, each projects configuration inherits from your global configuration,
which inherits from the HyperSQL default configuration file, which inherits from
the HyperSQL internal configuration.

Not to mention that, as soon as this is implemented, additional command line
parameters can be used to override options of this final configuration...
