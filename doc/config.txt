Configuration
=============

Configuration takes place using *.ini files. With HyperSQL.ini, the distribution
ships an example - which is also used as the default configuration file if you
do not specify a project. Its organization will probably be reworked for v2.0 -
but stay as it is until v1.5. The configuration file has multiple sections:

General
-------

As the name suggests, this section serves some general settings:

 * title_prefix: prefix for the HTML title on generated pages
 * project_info: a short text describing your project. This will be included
   with the main index page.
 * project_info_file: full path to a (text) file with additional information
   to be displayed at the main index page. You can use HTML tags in this file. 
 * project_logo: [path and] filename of a graphics file to be used as logo on the
   main index page
 * project_logo_url: if this is specified, it takes precedence over the previous
   setting: No file will be copied, this URL will be used directly instead. 
 * encoding: character set encoding of your source files. As this is not trivial
   to determine automatically, but usually all files of the same project use the
   same encoding, please set it in your config. Default is utf-8 - for a list
   of valid encodings, please see
   http://en.wikipedia.org/wiki/Character_encoding#Popular_character_encodings
   http://www.iana.org/assignments/character-sets


FileNames
---------

All about file names - e.g. concerning the target HTML files:

 * cache_dir: where to put our cache data. If not set, this will default to
   '<binDir>/cache/<projName>' - with binDir being the directory where
   HyperSQL.py resides, and projName the name of the project (1st parameter)
 * cpp_file_exts: the similar for C++ files
 * css_file: the stylesheet file to include in the generated HTML pages
 * css_url is used as (additional) CSS link - so you can use both entries
 * htmldir: where the HTML output should go to
 * rcsnames: directory names to exclude from parsing (below the
   top_level_directory)
 * sql_file_exts: specify extensions of files to be treated as SQL files. Separate
   multiple extensions using spaces.
 * top_level_directory: the top level directory of the source code to parse.
   HyperSQL will investigate all directories below this recursively.
 * unittest_dir: where to store XML-exported UnitTests

Plus all the pages (see below) with their file names.

PageNames
---------

Here you do not call the pages names - but you can specify their description for
the URLs, i.e. what is displayed in the Index pages navigation. Usually, this
part is handled by localization - so your config file should not contain this
section: Keep in mind, the link names will no longer be translated if you define
them here!

In some cases, this might still be useful - handle it with care. The options are
named similar to their corresponding file names options, so: 

 * filepath: the HTML file for the File Index With Pathnames
 * file: similar for File Index Without Pathnames
 * tab: similar for the tables listing
 * view: similar for the views listing
 * mview: similar for the listing of materialized views
 * package: and for the package index
 * function: guessed right, HTML file for the function index
 * procedure: procedure index HTML file
 * package_full: Index of packages including all their functions and procedures
 * form: Oracle Forms (XML converted only!)
 * bug: Index of bugs gathered from the JavaDoc @bug tags
 * todo: Index of todos gathered from the JavaDoc @todo tags
 * report: Verification report
 * stat: Some project stats, such as lines of code and file stats
 * depgraph: Dependency graph

Pages
-----

At this place you can define which pages shall be created. Again the same naming
as above (so please look there). The value is interpreted as Boolean - so best
is to use 0 to turn a page off, and 1 to turn it on. By default, all except the
views are enabled. 

Process
-------

Here come processing options:

 * blind_offset: How many lines before/after the CREATE statement shall we check
   for "anonymous javadoc blocks", i.e. those missing to name the object they
   describe. This is just for compatibility for a quick start - usually, you
   should leave it to the default of 0. You may however use any positive integer
   here - but keep in mind: the larger it is, the more it finds - which may not
   always fit...
 * cache: whether caching should be enabled (1, default) or not (0)
 * export_unittests: whether to export detected @testcases to XML (1) or not (0, default)
 * include_source: whether to include the (highlighted) sourcecode and link to it.
   The value must evaluate to a Boolean (, e.g. 0 for no, 1 for yes)
 * include_source_limit: limit source inclusion by file size in kilobytes
   (default: '0' = no limit). Files exceeding this limit will have their
   source not included at all.
 * javadoc: whether to process javadoc at all. If your project does not use
   JavaDoc, setting this to '0' will speed up processing, as the JavaDoc scan
   is skipped.
 * link_code_calls: whether calls to functions/procedures should be linked to
   their targets (1, default) in the highlighted code or not (0)
 * purge_on_start: whether to purge the target HTML directory from files of
   previous runs (if any) before generating new ones
 * whereused_scan_instring: whether to scan strings (i.e. things enclosed within
   single quotes) for where_used. This only makes sense if you have such calls
   created dynamically for EXECUTE IMMEDIATE or REF_CURSOR, and is subject to
   false positives. Default is '0' (No, Off, Don't)
 * whereused_scan_shortrefs: whether we shall also scan for not fully qualified
   references when building the where_used list, i.e. calls to some function or
   procedure not specifying its package. Those calls are sometimes used
   package internally (calling to a function/procedure within the same package),
   but probably never outside. If enabled, this may produce some false positives
   (especially if one (or more) of your files contain more than one package each)
   Default is '0' (No, Off, Don't)

Logging
-------

Several logging features are available, which can be configured here. As for log
levels, chose between NONE, DEBUG, INFO, WARNING, ERROR and CRITICAL - all levels
right-hand from the chosen one are automatically included as well.

 * screenlevel: what should be logged to the screen (aka STDOUT). Defaults to ERROR
 * filelevel: what should be logged to the log file specified. Defaults to DEBUG
 * logfile: File name of the log file. Defaults to HyperSQL.log
 * progress: whether to output progress information to STDOUT. Boolean, defaults
   to 1 (True)
 * verification: if javadoc verification is enabled, violations will be recorded
   for the corresponding report. Decide here whether they should also be recorded
   to the log file (1, as in HyperSQL before v2.9) or not (0, default since v2.9)
 * maxkbytes: automatically rotate logfiles when they reach this size. Set to '0'
   (default) to turn log switching off
 * backupcount: on rotation, keep this many "old" files. Default is '3'
 * capture_warnings: shall the logger capture warnings? With Python 2.7 or later,
   we can do so and such have them obey our log level rules. Default is '0'
   (disabled/do not capture). Set to '1' to activate (which will have no effect
   if you run a Python version < 2.7)

Verification
------------

In this section you may setup some JavaDoc verification stuff:

 * verify_javadoc: shall JavaDoc be verified at all? (Default: 0)
 * verify_forms: as above - shall we do so for forms as well? (Default: 0)
 * stats_javadoc_forms: Include bugs/todos/verification for forms into the stats?
   Default: 0, since all other form stats are excluded as well currently.
 * javadoc_mandatory: is JavaDoc mandatory for all your objects? (currently,
   this only affects packages) Default: 0 (no)
 * author_in_report: shall we display @author information for the items in
   bug/todo/verification reports? Default is 0 (no).
 * mandatory_tags: if JavaDoc is available for an object, which tags (space
   separated) are mandatory? The pseudo-tag "desc" stands for the objects
   description. Default: empty (no mandatory tags).

DepGraph
--------

Here goes everything for the dependency graphs:

 * processor: which graphviz processor to use. Default is 'dot', but
   you may want to decide for 'fdp', 'neato', or 'circo' as well
 * fontname: Font name to use for text, e.g. "Arial" (Default: "", i.e. let
   graphviz decide). If you set some other name, HyperSQL will not check
   whether that font exists, but simply pass it to  Graphviz. If the font
   does not exist, an error will be returned by Graphviz - and it will still
   use its default font (the error will be logged by HyperSQL). 
 * fontsize: Used to change the font size. The default here is "", which again
   means to let Graphviz decide. This value must be numeric, or it is ignored
   (with an error logged). 
 * ranksep_dot: If there's not enough (or too much) space between the different
   levels, you may play with this value. Default is "" again (let Graphviz
   decide, which uses "0.5" by default).
 * ranksep_twopi: Analogue to ranksep_dot for twopi (graphviz default: 1.0)
 * len_neato: like ranksep for neato (graphviz default: 1.0)
 * len_fdp: like ranksep for fdp (graphviz default: 0.3)
 * mindist_circo: like ranksep for circo
 * objects: Which object types should be included with the dependency graph.
   By default, we take them all - but with large projects, you may want to
   restrict it to e.g. "view pkg", which means only views and packages (but
   not functions and procedures).
 * deltmp: Delete the temporary graphviz command file? Default: 1. If set
   to 0, the corresponding command files will remain with the .tmp suffix.
   You may temporarily want to keep it in order to play with different options.
 * file2file: Draw the "file accesses file" graph (default: 1)
 * file2object: Draw the "file accesses object" graph (default: 0)
 * object2file: Draw the "object accesses file" graph (default: 1)
 * object2object: Draw the "object accesses object" graph (default: 1)

Colors
------

Here goes everything concerning graph colors. The configured values are used for
both, the statistic and the dependency graphs. Values here are tuples: the first
defines the background, the second the text color. Notation has to follow the
hexadecimal HTML definitions for RGB, e.g. #112233 for red=0x11, green=0x22,
blue=0x33.

The default colors for objects are grouped: Programm objects (packages,
procedures, functions) have blueish colors assigned, data objects (tables,
views) brownish to gold. As red signalizes alerts, it is used as such (bugs,
very large files).

The following settings define colors for database objects, and are used for
statistic and dependency graphs:

 * file: Colors for files
 * form: Colors for forms
 * func: Colors for functions
 * mview: Colors for materialized views
 * pkg: Colors for packages
 * proc: Colors for procedures
 * sequence: Colors for sequences
 * synonym: Colors for synonyms
 * tab: Colors for tables
 * trigger: Colors for trigger
 * typ: Colors for types
 * view: Colors for views

For statistic graphs, we additionally have the following definitions:

Lines of Code:

 * code: Plain code colors
 * comment: Plain comment colors
 * mixed: Colors for lines mixing code and (inline) comments
 * empty: Colors for empty lines

File statistics:

 * filebig: Colors for files larger than 100kb or having more than 1000 lines
 * file100k: Colors for files smaller than 100kb (but larger than 50kb)
 * file50k: Colors for files smaller than 50kb (but larger than 25kb)
 * file25k: Colors for files between 10kb and 25kb
 * file10k: Colors for files smaller than 10kb
 * file1000l: Colors for files with 400..1000 lines
 * file400l: Colors for files with less than 400 lines

JavaDoc statistics:

 * bug: Colors for bugs
 * warn: Colors for (JavaDoc) verification warnings
 * todo: Colors for items of the todo list


How the configuration works
===========================

You may ask the "Ruby Rod question" now: Who cares? But understanding how
configuration is done may help you doing it in the most optimal way, so here we
go:

On startup, HyperSQL first reads its "internal configuration defaults" - which
is a complete configuration set with default values for each available setting,
so it can even be run without any configuration file theoretically.

Next step is to check for available configuration files within the same directory
the script resides. If they exist, they are processed in the following order:

 * HyperSQL.ini
 * hypersql.ini
 * <ProjectName>.ini
 * <projectname>.ini

where the last two are only checked if a project name was specified at the command
line. Settings found in each of the files overwrite previously defined settings.
This especially means: None of the configuration files has to specify all
possible settings.

So how can you make use of this?

First, keep the HyperSQL.ini untouched, as it would either be overwritten on
updates. It may very well be the stupid programmer forgot to add an option to
the "internal configuration data" which then is handled here.

Second, if you have multiple different projects you process separately with
HyperSQL, create yourself a new file named hypersql.ini (all letters lowercase)
with those settings all (or most) of your projects have in common. Of course,
this only works with "real operating systems" - so this cannot be done under
Windows (which is not case sensitive regarding file names).

Last, create a separate configuration file holding only those values specific
to each of your projects. This file will be the only one you need to create
for new projects then.

This way, each projects configuration inherits from your global configuration,
which inherits from the HyperSQL default configuration file, which inherits from
the HyperSQL internal configuration.

Not to mention that, as soon as this is implemented, additional command line
parameters can be used to override options of this final configuration...
